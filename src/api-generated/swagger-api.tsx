/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps } from "restful-react";

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface MaterialDescription {
  result?: {
    _id?: string;
    DB_Magasin?: string;
    DB_Zone?: string;
    DB_Reference?: string;
    DB_CTT?: string;
    DB_CTU?: number;
    DB_DateStock?: string;
    DB_DQLM0?: number;
    DB_DQPM0?: number;
    DB_DQLM1?: number;
    DB_DQPM1?: number;
    DB_DQLM2?: number;
    DB_DQPM2?: number;
    DB_ReferenceImpactante?: string;
    DB_StockMin?: number;
    DB_StockMax?: number;
    DB_ReferenceImpactanteEncoded?: number;
  }[];
  count?: {
    material_number?: number;
  }[];
}

export interface OverviewDescription {
  result?: {
    _id?: string;
    DB_Magasin?: string;
    DB_Zone?: string;
    DB_ReferenceImpactantesChaudes?: number;
    DB_ReferenceImpactantesMoyennes?: number;
    DB_ReferenceImpactantesFroides?: number;
  }[];
  count?: {
    overview_number?: number;
  }[];
}

export interface MagasinDescription {
  result?: {
    _id?: string;
    DB_ReferenceImpactantesChaudes?: number;
    DB_ReferenceImpactantesMoyennes?: number;
    DB_ReferenceImpactantesFroides?: number;
  }[];
  count?: {
    magasin_number?: number;
  }[];
}

export interface SeuilDescription {
  result?: {
    _id?: string;
    magasin?: string;
    zone?: string;
    seuil_min?: string;
    seuil_max?: string;
    critere?: string;
  }[];
  count?: {
    seuil_number?: number;
  }[];
}

export interface TowerControlDescription {
  result?: {
    _id?: string;
    REC_ID?: number;
    REC_STATUS?: number;
    OFA_STATUS?: number;
    CTN_NB_STATUS_FINAUX?: number;
    CTN_NB?: number;
    TAC_NB_STATUS_FINAUX?: number;
    TAC_NB?: number;
    PARTNUMBER?: string;
    URGENCE_RECEPTION?: string;
    FLUX?: string;
    FLUX_DETAIL?: string;
  }[];
  count?: number;
}

export interface TowerControlDetailDescription {
  result?: {
    _id?: string;
    REC_ID?: number;
    REC_STATUS?: number;
    OFA_STATUS?: number;
    CTN_NB_STATUS_FINAUX?: number;
    CTN_NB?: number;
    TAC_NB_STATUS_FINAUX?: number;
    TAC_NB?: number;
    PARTNUMBER?: string;
    URGENCE_RECEPTION?: string;
    FLUX?: string;
    FLUX_DETAIL?: string;
    OFA_TYPE_PRELEVEMENT?: string;
    OFA_QUANTITE?: number;
    TOF_ID?: number;
    DATE_CREATION?: string;
    TS_CREATION?: number;
    DATE_FERMETURE?: string;
    TS_FERMETURE?: number;
    CYCLE_VIE?: {
      REC_ID?: number;
    }[];
    REC_CYCLE_VIE?: {
      REC_ID?: number;
      OP_TYPE?: string;
      REC_STATUS?: number;
      REC_URGENCE?: string;
      REC_ART_PARTNO?: string;
      REC_QUANTITE_RECUE?: number;
      TRE_ID?: string;
      TFR_ID?: string;
      TS?: number;
      TEMPS_CHANGEMENT_STATUS?: number;
      TEMPS_CUMULATIF?: number;
    }[];
    OFA_CYCLE_VIE?: {
      REC_ID?: number;
      OP_TYPE?: string;
      OFA_STATUS?: number;
      OFA_ID?: number;
      TS?: number;
      TOF_ID?: number;
      OFA_ART_PARTNO?: string;
      OFA_TYPE_PRELEVEMENT?: string;
      OFA_QUANTITE?: number;
      TEMPS_CHANGEMENT_STATUS?: number;
      TEMPS_CUMULATIF?: number;
    }[];
    CTN_CYCLE_VIE?: {
      CTN_ID?: number;
      CTN_STATUS?: number;
      CYCLE_VIE_DETAIL?: {
        REC_ID?: number;
        OP_TYPE?: string;
        CTN_STATUS?: number;
        CTN_ID?: number;
        CTN_QUANTITE?: number;
        TS?: number;
        TEMPS_CHANGEMENT_STATUS?: number;
        TEMPS_CUMULATIF?: number;
      }[];
    }[];
    TAC_CYCLE_VIE?: {
      TAC_ID?: number;
      TAC_STATUS?: number;
      CYCLE_VIE_DETAIL?: {
        REC_ID?: number;
        OP_TYPE?: string;
        TAC_STATUS?: number;
        TAC_ID?: number;
        MET_LIBELLE?: string;
        TS?: number;
        TEMPS_CHANGEMENT_STATUS?: number;
        TEMPS_CUMULATIF?: number;
      }[];
    }[];
    DOH_CYCLE_VIE?: {
      DOH_ID?: number;
      DOH_STATUS?: number;
      CYCLE_VIE_DETAIL?: {
        REC_ID?: number;
        OFA_ID?: number;
        OP_TYPE?: string;
        DOH_STATUS?: number;
        DOH_ID?: number;
        DOH_DATE_ENGAGEMENT?: string;
        OFA_QUANTITE?: number;
        TS?: number;
        TEMPS_CHANGEMENT_STATUS?: number;
        TEMPS_CUMULATIF?: number;
      }[];
    }[];
  };
}

export interface DashboardTempsTraitementDescription {
  jours?: {
    date?: string;
    temps_traitement_urgent?: number;
  }[];
  moyenne?: number;
}

export interface DashboardReferencesUniquesDescription {
  references_uniques?: string[];
}

export interface DashboardTempsTraitementJourMois {
  jours?: {
    part_number?: string;
    temps_reception?: number;
    temps_conditionnement?: number;
    temps_transport?: number;
    temps_stockage?: number;
    temps_total?: number;
  }[];
  mois?: {
    part_number?: string;
    temps_reception?: number;
    temps_conditionnement?: number;
    temps_transport?: number;
    temps_stockage?: number;
    temps_total?: number;
  }[];
}

export interface DashboardRotationPiece {
  rotation_piece_zone?: {
    zone?: string;
    nb_pieces_chaudes?: number;
    nb_piece_rotation?: number;
  }[];
}

export interface GetMaterialsQueryParams {
  range: string;
  colonne_tri?: string;
  colonne_tri_option?: number;
  DB_Magasin?: string;
  DB_Zone?: string;
  DB_Reference?: string;
  DB_ReferenceImpactante?: string;
  sortDesc?: boolean;
  sortColumn?: string;
}

export type GetMaterialsProps = Omit<GetProps<MaterialDescription, void, GetMaterialsQueryParams>, "path">;

export const GetMaterials = (props: GetMaterialsProps) => (
  <Get<MaterialDescription, void, GetMaterialsQueryParams> path={`/materials`} {...props} />
);

export type UseGetMaterialsProps = Omit<UseGetProps<MaterialDescription, GetMaterialsQueryParams>, "path">;

export const useGetMaterials = (props: UseGetMaterialsProps) =>
  useGet<MaterialDescription, void, GetMaterialsQueryParams>(`/materials`, props);

export interface GetOverviewsQueryParams {
  range: string;
  DB_Magasin?: string;
  DB_Zone?: string;
  sortDesc?: boolean;
  sortColumn?: string;
}

export type GetOverviewsProps = Omit<GetProps<OverviewDescription, void, GetOverviewsQueryParams>, "path">;

export const GetOverviews = (props: GetOverviewsProps) => (
  <Get<OverviewDescription, void, GetOverviewsQueryParams> path={`/overviews`} {...props} />
);

export type UseGetOverviewsProps = Omit<UseGetProps<OverviewDescription, GetOverviewsQueryParams>, "path">;

export const useGetOverviews = (props: UseGetOverviewsProps) =>
  useGet<OverviewDescription, void, GetOverviewsQueryParams>(`/overviews`, props);

export interface GetMagasinsQueryParams {
  range: string;
  DB_Magasin?: string;
  sortDesc?: boolean;
  sortColumn?: string;
}

export type GetMagasinsProps = Omit<GetProps<MagasinDescription, void, GetMagasinsQueryParams>, "path">;

export const GetMagasins = (props: GetMagasinsProps) => (
  <Get<MagasinDescription, void, GetMagasinsQueryParams> path={`/magasins`} {...props} />
);

export type UseGetMagasinsProps = Omit<UseGetProps<MagasinDescription, GetMagasinsQueryParams>, "path">;

export const useGetMagasins = (props: UseGetMagasinsProps) =>
  useGet<MagasinDescription, void, GetMagasinsQueryParams>(`/magasins`, props);

export interface GetSeuilsQueryParams {
  range: string;
  magasin?: string;
  zone?: string;
  critere?: string;
  sortDesc?: boolean;
  sortColumn?: string;
}

export type GetSeuilsProps = Omit<GetProps<SeuilDescription, void, GetSeuilsQueryParams>, "path">;

export const GetSeuils = (props: GetSeuilsProps) => (
  <Get<SeuilDescription, void, GetSeuilsQueryParams> path={`/seuils`} {...props} />
);

export type UseGetSeuilsProps = Omit<UseGetProps<SeuilDescription, GetSeuilsQueryParams>, "path">;

export const useGetSeuils = (props: UseGetSeuilsProps) =>
  useGet<SeuilDescription, void, GetSeuilsQueryParams>(`/seuils`, props);

export interface GetTourControlGlobalQueryParams {
  range: string;
  REC_STATUS?: number;
  OFA_STATUS?: number;
  URGENCE_RECEPTION?: string;
  FLUX?: string;
  sortDesc?: boolean;
  sortColumn?: string;
}

export type GetTourControlGlobalProps = Omit<
  GetProps<TowerControlDescription, void, GetTourControlGlobalQueryParams>,
  "path"
>;

export const GetTourControlGlobal = (props: GetTourControlGlobalProps) => (
  <Get<TowerControlDescription, void, GetTourControlGlobalQueryParams> path={`/tour_controle`} {...props} />
);

export type UseGetTourControlGlobalProps = Omit<
  UseGetProps<TowerControlDescription, GetTourControlGlobalQueryParams>,
  "path"
>;

export const useGetTourControlGlobal = (props: UseGetTourControlGlobalProps) =>
  useGet<TowerControlDescription, void, GetTourControlGlobalQueryParams>(`/tour_controle`, props);

export interface GetTourControlByIDQueryParams {
  range: string;
}

export type GetTourControlByIDProps = Omit<
  GetProps<TowerControlDetailDescription, void, GetTourControlByIDQueryParams>,
  "path"
> & { id: number };

export const GetTourControlByID = ({ id, ...props }: GetTourControlByIDProps) => (
  <Get<TowerControlDetailDescription, void, GetTourControlByIDQueryParams> path={`/tour_controle/${id}`} {...props} />
);

export type UseGetTourControlByIDProps = Omit<
  UseGetProps<TowerControlDetailDescription, GetTourControlByIDQueryParams>,
  "path"
> & { id: number };

export const useGetTourControlByID = ({ id, ...props }: UseGetTourControlByIDProps) =>
  useGet<TowerControlDetailDescription, void, GetTourControlByIDQueryParams>(`/tour_controle/${id}`, props);

export interface GetTempsTraitementJourQueryParams {
  nbJoursGlissants: number;
}

export type GetTempsTraitementJourProps = Omit<
  GetProps<DashboardTempsTraitementDescription, void, GetTempsTraitementJourQueryParams>,
  "path"
>;

export const GetTempsTraitementJour = (props: GetTempsTraitementJourProps) => (
  <Get<DashboardTempsTraitementDescription, void, GetTempsTraitementJourQueryParams>
    path={`/dashboard/temps_traitement_urgent`}
    {...props}
  />
);

export type UseGetTempsTraitementJourProps = Omit<
  UseGetProps<DashboardTempsTraitementDescription, GetTempsTraitementJourQueryParams>,
  "path"
>;

export const useGetTempsTraitementJour = (props: UseGetTempsTraitementJourProps) =>
  useGet<DashboardTempsTraitementDescription, void, GetTempsTraitementJourQueryParams>(
    `/dashboard/temps_traitement_urgent`,
    props,
  );

export type GetReferencesUniquesProps = Omit<GetProps<DashboardReferencesUniquesDescription, void, void>, "path">;

export const GetReferencesUniques = (props: GetReferencesUniquesProps) => (
  <Get<DashboardReferencesUniquesDescription, void, void> path={`/dashboard/references_uniques`} {...props} />
);

export type UseGetReferencesUniquesProps = Omit<UseGetProps<DashboardReferencesUniquesDescription, void>, "path">;

export const useGetReferencesUniques = (props: UseGetReferencesUniquesProps) =>
  useGet<DashboardReferencesUniquesDescription, void, void>(`/dashboard/references_uniques`, props);

export interface GetTempsTraitementJourMoisQueryParams {
  refIds: string;
}

export type GetTempsTraitementJourMoisProps = Omit<
  GetProps<DashboardTempsTraitementJourMois, void, GetTempsTraitementJourMoisQueryParams>,
  "path"
>;

export const GetTempsTraitementJourMois = (props: GetTempsTraitementJourMoisProps) => (
  <Get<DashboardTempsTraitementJourMois, void, GetTempsTraitementJourMoisQueryParams>
    path={`/dashboard/temps_traitement_jour_mois`}
    {...props}
  />
);

export type UseGetTempsTraitementJourMoisProps = Omit<
  UseGetProps<DashboardTempsTraitementJourMois, GetTempsTraitementJourMoisQueryParams>,
  "path"
>;

export const useGetTempsTraitementJourMois = (props: UseGetTempsTraitementJourMoisProps) =>
  useGet<DashboardTempsTraitementJourMois, void, GetTempsTraitementJourMoisQueryParams>(
    `/dashboard/temps_traitement_jour_mois`,
    props,
  );

export interface GetRotationPieceQueryParams {
  nbPieceChaude: number;
  zoneIds: string;
}

export type GetRotationPieceProps = Omit<GetProps<DashboardRotationPiece, void, GetRotationPieceQueryParams>, "path">;

export const GetRotationPiece = (props: GetRotationPieceProps) => (
  <Get<DashboardRotationPiece, void, GetRotationPieceQueryParams> path={`/dashboard/rotation_piece`} {...props} />
);

export type UseGetRotationPieceProps = Omit<UseGetProps<DashboardRotationPiece, GetRotationPieceQueryParams>, "path">;

export const useGetRotationPiece = (props: UseGetRotationPieceProps) =>
  useGet<DashboardRotationPiece, void, GetRotationPieceQueryParams>(`/dashboard/rotation_piece`, props);
